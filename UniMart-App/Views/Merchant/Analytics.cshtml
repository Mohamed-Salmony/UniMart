@{
    ViewData["Title"] = "Analytics";
    Layout = "_DashboardLayout";
}

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-0" data-translate="analytics_dashboard">Analytics Dashboard</h2>
            <p class="text-muted" data-translate="track_your_store_performance_and_insights">Track your store performance and insights</p>
        </div>
        <div class="btn-group" role="group">
            <input type="radio" class="btn-check" name="timeRange" id="week" value="7">
            <label class="btn btn-outline-primary" for="week" data-translate="7_days">7 Days</label>
            
            <input type="radio" class="btn-check" name="timeRange" id="month" value="30" checked>
            <label class="btn btn-outline-primary" for="month" data-translate="30_days">30 Days</label>
            
            <input type="radio" class="btn-check" name="timeRange" id="quarter" value="90">
            <label class="btn btn-outline-primary" for="quarter" data-translate="90_days">90 Days</label>
        </div>
    </div>

    <!-- Sales Chart -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0" data-translate="sales_overview">Sales Overview</h5>
                </div>
                <div class="card-body">
                    <canvas id="salesChart" width="400" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Metrics -->
    <div class="row mb-4">
        <div class="col-lg-6">
            <div class="card shadow">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0" data-translate="top_selling_products">Top Selling Products</h5>
                        <form id="exportTopProductsForm" method="post" asp-controller="Merchant" asp-action="ExportTopProductsToExcel" class="mb-2 float-end" target="_blank">
                            <input type="hidden" name="days" id="exportTopProductsDays" value="30" />
                            <button type="submit" class="btn btn-success btn-sm">
                                <i class="bi bi-file-earmark-excel"></i> Export to Excel
                            </button>
                        </form>
                    </div>
                </div>
                <div class="card-body">
                    @if (ViewBag.TopProducts != null)
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th data-translate="product">Product</th>
                                        <th data-translate="sold">Sold</th>
                                        <th data-translate="revenue">Revenue</th>
                                        <th data-translate="net_revenue">Net Revenue</th>
                                    </tr>
                                </thead>
                                <tbody id="topProductsTableBody">
                                    <!-- Table rows will be dynamically rendered by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center py-3" data-translate="no_sales_data_available_yet">No sales data available yet.</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0" data-translate="revenue_breakdown">Revenue Breakdown</h5>
                </div>
                <div class="card-body">
                    <canvas id="revenueChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Detailed Analytics -->
    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0" data-translate="sales_metrics">Sales Metrics</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <span data-translate="average_order_value">Average Order Value</span>
                            <strong id="avgOrderValue">@((ViewBag.AvgOrderValue ?? 0M).ToString("N2")) EGP</strong>
                        </div>
                        @{
                            decimal avgOrderValue = ViewBag.AvgOrderValue ?? 0M;
                            int avgOrderValuePercent = (int)Math.Min(100, avgOrderValue / 100 * 100); // Example max $100
                        }
                        <div class="progress mt-1">
                            <div class="progress-bar bg-success" style="width: @avgOrderValuePercent%"></div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <span data-translate="revenue_rate">Revenue Rate</span>
                            <strong id="revenueRate">@((ViewBag.RevenueRate ?? 0.0).ToString("0.0"))%</strong>
                        </div>
                        @{
                            double revenueRate = ViewBag.RevenueRate != null ? Convert.ToDouble(ViewBag.RevenueRate) : 0.0;
                            int revenueRatePercent = (int)Math.Min(100, revenueRate);
                        }
                        <div class="progress mt-1">
                            <div class="progress-bar bg-info" id="revenueRateBar" style="width: @revenueRatePercent%"></div>
                        </div>
                    </div>
                    
                    <div class="mb-0">
                        <div class="d-flex justify-content-between">
                            <span data-translate="customer_satisfaction">Customer Satisfaction</span>
                            <strong id="avgRating">@((ViewBag.AvgRating ?? 0.0).ToString("0.0"))/5</strong>
                        </div>
                        @{
                            double avgRating = ViewBag.AvgRating ?? 0.0;
                            int avgRatingPercent = (int)Math.Round((avgRating / 5.0) * 100);
                        }
                        <div class="progress mt-1">
                            <div class="progress-bar bg-primary" id="avgRatingBar" style="width: @avgRatingPercent%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4 mb-4">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0" data-translate="inventory_status">Inventory Status</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <span data-translate="in_stock">In Stock</span>
                            <span class="badge bg-success" id="inStockPercent">@ViewBag.InStockPercent%</span>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <span data-translate="low_stock">Low Stock</span>
                            <span class="badge bg-warning" id="lowStockPercent">@ViewBag.LowStockPercent%</span>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <span data-translate="out_of_stock">Out of Stock</span>
                            <span class="badge bg-danger" id="outOfStockPercent">@ViewBag.OutOfStockPercent%</span>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <div class="text-center">
                        <h6 data-translate="inventory_health_score">Inventory Health Score</h6>
                        <div class="display-6 text-success" id="inventoryScore">@ViewBag.InventoryScore</div>
                        <small class="text-muted" id="inventoryHealthText">@ViewBag.InventoryHealthText</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4 mb-4">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0" data-translate="growth_trends">Growth Trends</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <span data-translate="revenue_growth">Revenue Growth</span>
                            <span class="text-success" id="revenueGrowth">
                                <i class="bi bi-arrow-up"></i> @((ViewBag.RevenueGrowth ?? 0.0).ToString("+0.0;-0.0;0.0"))%
                            </span>
                        </div>
                        <small class="text-muted" data-translate="vs_last_month">vs last month</small>
                    </div>
                    
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <span data-translate="order_growth">Order Growth</span>
                            <span class="text-success" id="orderGrowth">
                                <i class="bi bi-arrow-up"></i> @((ViewBag.OrderGrowth ?? 0.0).ToString("+0.0;-0.0;0.0"))%
                            </span>
                        </div>
                        <small class="text-muted" data-translate="vs_last_month">vs last month</small>
                    </div>
                    
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <span data-translate="customer_growth">Customer Growth</span>
                            <span class="text-success" id="customerGrowth">
                                <i class="bi bi-arrow-up"></i> @((ViewBag.CustomerGrowth ?? 0.0).ToString("+0.0;-0.0;0.0"))%
                            </span>
                        </div>
                        <small class="text-muted" data-translate="vs_last_month">vs last month</small>
                    </div>
                    
                    <div class="mb-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <span data-translate="product_views">Product Views</span>
                            <span class="text-info" id="productViewsGrowth">
                                <i class="bi bi-arrow-up"></i> @((ViewBag.ProductViewsGrowth ?? 0.0).ToString("+0.0;-0.0;0.0"))%
                            </span>
                        </div>
                        <small class="text-muted" data-translate="vs_last_month">vs last month</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let salesChart, revenueChart;
        function renderCharts(salesData, topProducts) {
            // Sales Chart
            const salesCtx = document.getElementById('salesChart').getContext('2d');
            if (salesChart) salesChart.destroy();
            salesChart = new Chart(salesCtx, {
                type: 'line',
                data: {
                    labels: salesData.map(d => new Date(d.date).toLocaleDateString()),
                    datasets: [{
                        label: 'Revenue',
                        data: salesData.map(d => d.revenue),
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.1)',
                        tension: 0.1,
                        fill: true
                    }, {
                        label: 'Orders',
                        data: salesData.map(d => d.orders),
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        tension: 0.1,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Revenue (EGP)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Orders'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    }
                }
            });

            // Revenue Breakdown Chart
            const revenueCtx = document.getElementById('revenueChart').getContext('2d');
            if (revenueChart) revenueChart.destroy();
            revenueChart = new Chart(revenueCtx, {
                type: 'doughnut',
                data: {
                    labels: topProducts.map(p => p.product.name),
                    datasets: [{
                        data: topProducts.map(p => p.revenue),
                        backgroundColor: [
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40', '#B0E57C', '#F7B7A3', '#A3A1F7', '#F7E6A3'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });
        }

        function renderTopProductsTable(topProducts) {
            const tbody = document.querySelector('#topProductsTableBody');
            tbody.innerHTML = '';
            if (topProducts.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted" data-translate="no_sales_data_available_yet">No sales data available yet.</td></tr>';
                return;
            }
            topProducts.forEach((item, idx) => {
                const tr = document.createElement('tr');
                tr.classList.add('top-product-row');
                tr.setAttribute('data-product', item.product.name);
                tr.setAttribute('data-revenue', item.revenue);
                tr.setAttribute('data-netrevenue', item.netRevenue);
                tr.setAttribute('data-idx', idx);
                tr.innerHTML = `
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${item.product.imageUrl || '/img/product-placeholder.png'}" alt="${item.product.name}" class="me-2" style="width: 30px; height: 30px; object-fit: cover; border-radius: 4px;">
                            <div>
                                <strong>${item.product.name}</strong><br>
                                <small class="text-muted">${item.product.faculty || ''}</small>
                            </div>
                        </div>
                    </td>
                    <td>${item.totalSold}</td>
                    <td>${item.revenue.toLocaleString(undefined, {minimumFractionDigits:2, maximumFractionDigits:2})} EGP</td>
                    <td>${item.netRevenue.toLocaleString(undefined, {minimumFractionDigits:2, maximumFractionDigits:2})} EGP</td>
                `;
                tbody.appendChild(tr);
            });
            // Add click event for each row
            tbody.querySelectorAll('.top-product-row').forEach(row => {
                row.addEventListener('click', function() {
                    tbody.querySelectorAll('.top-product-row').forEach(r => r.classList.remove('selected'));
                    this.classList.add('selected');
                    const productName = this.getAttribute('data-product');
                    // Highlight this product on the doughnut chart
                    if (window.revenueChart) {
                        const idx = parseInt(this.getAttribute('data-idx'));
                        revenueChart.setActiveElements([{datasetIndex: 0, index: idx}]);
                        revenueChart.tooltip.setActiveElements([{datasetIndex: 0, index: idx}], {x:0, y:0});
                        revenueChart.update();
                    }
                });
            });
        }

        function updateMetrics(data) {
            // Sales Metrics
            if (data.avgOrderValue !== undefined && document.getElementById('avgOrderValue'))
                document.getElementById('avgOrderValue').textContent = data.avgOrderValue.toLocaleString(undefined, {minimumFractionDigits:2, maximumFractionDigits:2}) + ' EGP';
            // Revenue Rate
            if (data.revenueRate !== undefined && document.getElementById('revenueRate')) {
                document.getElementById('revenueRate').textContent = (data.revenueRate ?? 0).toFixed(1) + '%';
                if (document.getElementById('revenueRateBar'))
                    document.getElementById('revenueRateBar').style.width = Math.min(100, data.revenueRate ?? 0) + '%';
            }
            // Customer Satisfaction
            if (data.avgRating !== undefined && document.getElementById('avgRating')) {
                document.getElementById('avgRating').textContent = (data.avgRating ?? 0).toFixed(1) + '/5';
                if (document.getElementById('avgRatingBar'))
                    document.getElementById('avgRatingBar').style.width = Math.round((data.avgRating ?? 0) / 5 * 100) + '%';
            }
            // Inventory Status
            if (data.inStockPercent !== undefined && document.getElementById('inStockPercent')) document.getElementById('inStockPercent').textContent = (data.inStockPercent ?? 0) + '%';
            if (data.lowStockPercent !== undefined && document.getElementById('lowStockPercent')) document.getElementById('lowStockPercent').textContent = (data.lowStockPercent ?? 0) + '%';
            if (data.outOfStockPercent !== undefined && document.getElementById('outOfStockPercent')) document.getElementById('outOfStockPercent').textContent = (data.outOfStockPercent ?? 0) + '%';
            if (data.inventoryScore !== undefined && document.getElementById('inventoryScore')) document.getElementById('inventoryScore').textContent = data.inventoryScore ?? '';
            if (data.inventoryHealthText !== undefined && document.getElementById('inventoryHealthText')) document.getElementById('inventoryHealthText').textContent = data.inventoryHealthText ?? '';
            // Growth Trends
            if (data.revenueGrowth !== undefined && document.getElementById('revenueGrowth')) document.getElementById('revenueGrowth').innerHTML = '<i class="bi bi-arrow-up"></i> ' + (data.revenueGrowth ?? 0).toFixed(1) + '%';
            if (data.orderGrowth !== undefined && document.getElementById('orderGrowth')) document.getElementById('orderGrowth').innerHTML = '<i class="bi bi-arrow-up"></i> ' + (data.orderGrowth ?? 0).toFixed(1) + '%';
            if (data.customerGrowth !== undefined && document.getElementById('customerGrowth')) document.getElementById('customerGrowth').innerHTML = '<i class="bi bi-arrow-up"></i> ' + (data.customerGrowth ?? 0).toFixed(1) + '%';
            if (data.productViewsGrowth !== undefined && document.getElementById('productViewsGrowth')) document.getElementById('productViewsGrowth').innerHTML = '<i class="bi bi-arrow-up"></i> ' + (data.productViewsGrowth ?? 0).toFixed(1) + '%';
        }

        async function fetchAnalytics(days) {
            const res = await fetch(`/Merchant/GetAnalyticsData?days=${days}`);
            const data = await res.json();
            renderCharts(data.salesData, data.topProducts);
            renderTopProductsTable(data.topProducts);
            updateMetrics(data);
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Add IDs to metrics for JS update
            document.querySelector('[name="timeRange"]:checked').dispatchEvent(new Event('change'));
            // Time range filter
            const timeRangeFilters = document.querySelectorAll('input[name="timeRange"]');
            timeRangeFilters.forEach(filter => {
                filter.addEventListener('change', function() {
                    fetchAnalytics(this.value);
                    document.getElementById('exportTopProductsDays').value = this.value;
                });
            });
            // Update export form hidden input when time range changes
            const exportDaysInput = document.getElementById('exportTopProductsDays');
            timeRangeFilters.forEach(filter => {
                filter.addEventListener('change', function() {
                    if (exportDaysInput) exportDaysInput.value = this.value;
                });
            });
            // Initial load
            fetchAnalytics(document.querySelector('input[name="timeRange"]:checked').value);
        });
    </script>
}

@section Styles {
    <style>
        .order-card {
            transition: all 0.3s ease;
        }
        .order-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1) !important;
        }
        .btn-check:checked + .btn {
            background-color: #007bff;
            border-color: var(--bs-primary);
            color: white;
        }
        .order-row:hover {
            background-color: #f1f1f1;
        }
        .order-row.selected {
            background-color: #d1ecf1;
        }
        .top-product-row:hover {
            background-color: #f1f1f1;
            cursor: pointer;
        }
        .top-product-row.selected {
            background-color: #d1ecf1;
        }
    </style>
}