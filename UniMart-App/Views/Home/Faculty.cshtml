@model UniMart_App.Models.Faculty

@{
    ViewData["Title"] = "Faculty Details";
}

@Html.AntiForgeryToken()

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container py-4">
    <div class="row mb-4">
        <div class="col-md-4">
            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <img src="@Model.ImageUrl" class="img-fluid rounded shadow" alt="@Model.Name" style="object-fit:cover; width:100%; height:250px;">
            }
        </div>
        <div class="col-md-8">
            <h2 class="mb-2">@Model.Name</h2>
            <p class="lead">@Model.Description</p>
            <p><strong>Maximum Academic Years:</strong> @Model.MaxAcademicYears</p>
        </div>
    </div>

    <h4 class="mb-3" data-translate="products">Products</h4>
    <div class="d-flex flex-wrap gap-2 mb-3">
        <button class="btn btn-outline-primary filter-btn active" data-filter="all" data-translate="all">All</button>
        <button class="btn btn-outline-primary filter-btn" data-filter="low" data-translate="price_low_to_high">Price: Low to High</button>
        <button class="btn btn-outline-primary filter-btn" data-filter="high" data-translate="price_high_to_low">Price: High to Low</button>
    </div>
    @if (Model.Products != null && Model.Products.Any())
    {
        <div class="row row-cols-1 row-cols-md-3 g-4" id="productGrid">
        @foreach (var product in Model.Products)
        {
            var originalPrice = product.OriginalPrice ?? product.Price;
            var hasDiscount = product.OriginalPrice.HasValue && product.OriginalPrice.Value > product.Price;
            var discountPercent = hasDiscount ? (int)Math.Round(100 * (originalPrice - product.Price) / originalPrice) : 0;
            <div class="col product-card" data-price="@product.Price">
                <div class="card h-100 shadow-sm position-relative card-hover enhanced-hover">
                    <a href="@Url.Action("Details", "Products", new { id = product.Id })" class="card-link text-decoration-none text-dark" style="display:block; height:100%;">
                        @{
                            var firstImage = (product.ProductImages != null && product.ProductImages.Any()) ? product.ProductImages.FirstOrDefault() : null;
                        }
                        @if (!string.IsNullOrEmpty(firstImage?.ImageUrl))
                        {
                            <img src="@firstImage.ImageUrl" class="card-img-top" alt="@product.Name" style="object-fit:cover; height:180px;" />
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center bg-light" style="height:180px;">
                                <span class="text-muted" data-translate="no_image">No Image</span>
                            </div>
                        }
                        @if (hasDiscount)
                        {
                            <span class="badge bg-danger position-absolute top-0 start-0 m-2 fs-6">-@discountPercent%</span>
                        }
                        <div class="card-body">
                            <h6 class="card-title">@product.Name</h6>
                            <div class="mb-1">
                                <span class="text-warning">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (product.AverageRating >= i)
                                        {
                                            <i class="bi bi-star-fill"></i>
                                        }
                                        else if (product.AverageRating >= i - 0.5m)
                                        {
                                            <i class="bi bi-star-half"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star"></i>
                                        }
                                    }
                                </span>
                                <span class="ms-1 small text-muted">@product.AverageRating.ToString("0.0")</span>
                            </div>
                            <div class="mb-1">
                                @if (hasDiscount)
                                {
                                    <span class="text-muted text-decoration-line-through me-2">@originalPrice.ToString("N2") EGP</span>
                                    <span class="text-success fw-bold">@product.Price.ToString("N2") EGP</span>
                                }
                                else
                                {
                                    <span class="text-success fw-bold">@product.Price.ToString("N2") EGP</span>
                                }
                            </div>
                        </div>
                    </a>
                    <button type="button" class="btn btn-light position-absolute top-0 end-0 m-2 add-to-cart-btn" title="Add to Cart" data-product-id="@product.Id">
                        <i class="bi bi-cart-plus fs-5"></i>
                    </button>
                    <button type="button" class="btn btn-light position-absolute bottom-0 end-0 m-2 favorite-btn" title="Add to Favorites" data-product-id="@product.Id">
                        <i class="bi @(ViewBag.FavoriteProductIds != null && ((List<int>)ViewBag.FavoriteProductIds).Contains(product.Id) ? "bi-heart-fill text-danger" : "bi-heart") fs-5"></i>
                    </button>
                </div>
            </div>
        }
        </div>
    }
    else
    {
        <p class="text-muted" data-translate="no_products_available_for_this_faculty">No products available for this faculty.</p>
    }
</div>

<div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 1080; min-width: 300px;">
    <div id="cartToast" class="toast align-items-center text-bg-success border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-cart-check-fill me-2"></i>Product added to cart!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
    <div id="favoriteToast" class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-heart-fill me-2"></i>Added to favorites!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<script>
    // Card hover effect
    document.querySelectorAll('.card-hover').forEach(card => {
        card.addEventListener('mouseenter', () => {
            card.classList.add('shadow-lg', 'scale-up');
        });
        card.addEventListener('mouseleave', () => {
            card.classList.remove('shadow-lg', 'scale-up');
        });
    });

    // Product filter
    const filterBtns = document.querySelectorAll('.filter-btn');
    const productCards = document.querySelectorAll('.product-card');
    filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            filterBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            let filter = this.getAttribute('data-filter');
            let sorted = Array.from(productCards);
            if (filter === 'low') {
                sorted.sort((a, b) => parseFloat(a.dataset.price) - parseFloat(b.dataset.price));
            } else if (filter === 'high') {
                sorted.sort((a, b) => parseFloat(b.dataset.price) - parseFloat(a.dataset.price));
            }
            const grid = document.getElementById('productGrid');
            sorted.forEach(card => grid.appendChild(card));
        });
    });
    // Add to Cart button (AJAX, form params)
    document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const productId = this.getAttribute('data-product-id');
            const button = this;
            const params = new URLSearchParams();
            params.append('productId', productId);
            params.append('quantity', 1);
            fetch('/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name=__RequestVerificationToken]')?.value || '',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: params
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    button.classList.add('btn-success');
                    const icon = button.querySelector('i');
                    if (icon) icon.classList.add('text-white');
                    setTimeout(() => {
                        button.classList.remove('btn-success');
                        if (icon) icon.classList.remove('text-white');
                    }, 800);
                    // Show toast
                    var toastEl = document.getElementById('cartToast');
                    if (toastEl) {
                        var toast = bootstrap.Toast.getOrCreateInstance(toastEl);
                        toast.show();
                    }
                } else {
                    alert(data.message || 'Failed to add to cart.');
                }
            })
            .catch(() => alert('Error adding to cart.'));
        });
    });
    // Favorite button (AJAX)
    document.querySelectorAll('.favorite-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const productId = this.getAttribute('data-product-id');
            const icon = this.querySelector('i');
            fetch('/Products/AddToFavorites', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name=__RequestVerificationToken]')?.value || '',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `productId=${productId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    icon.classList.remove('bi-heart');
                    icon.classList.add('bi-heart-fill', 'text-danger');
                    // Show favorite toast
                    var favToastEl = document.getElementById('favoriteToast');
                    if (favToastEl) {
                        favToastEl.querySelector('.toast-body').innerHTML = '<i class="bi bi-heart-fill me-2"></i>Added to favorites!';
                        var favToast = bootstrap.Toast.getOrCreateInstance(favToastEl);
                        favToast.show();
                    }
                } else if (data.message && data.message.toLowerCase().includes('already in favorites')) {
                    // Show toast for already in favorites
                    var favToastEl = document.getElementById('favoriteToast');
                    if (favToastEl) {
                        favToastEl.querySelector('.toast-body').innerHTML = '<i class="bi bi-heart-fill me-2"></i>Already in favorites!';
                        var favToast = bootstrap.Toast.getOrCreateInstance(favToastEl);
                        favToast.show();
                    }
                } else {
                    alert(data.message || 'Failed to add to favorites.');
                }
            })
            .catch(() => alert('Error adding to favorites.'));
        });
    });
</script>
<style>
    .card-hover {
        transition: transform 0.2s cubic-bezier(.4,2,.6,1), box-shadow 0.2s;
    }
    .enhanced-hover:hover {
        transform: scale(1.06) translateY(-6px);
        box-shadow: 0 1rem 2rem rgba(0,0,0,0.18)!important;
        border: 2px solid #0d6efd;
        z-index: 3;
    }
    .scale-up {
        transform: scale(1.04);
        box-shadow: 0 0.5rem 1.5rem rgba(0,0,0,0.15)!important;
    }
    .add-to-cart-btn {
        z-index: 2;
        border-radius: 50%;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: background 0.2s, color 0.2s;
    }
    .add-to-cart-btn.btn-success {
        background: #198754;
        color: #fff;
    }
    .filter-btn.active, .filter-btn:active {
        background: #0d6efd;
        color: #fff;
        border-color: #0d6efd;
    }
    .filter-btn {
        transition: background 0.2s, color 0.2s;
    }
    .badge.bg-danger {
        font-size: 1rem;
        padding: 0.5em 0.8em;
        border-radius: 0.7em;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }
    .text-decoration-line-through {
        text-decoration: line-through;
    }
    .add-to-cart-btn:hover i,
    .favorite-btn:hover i {
        color: #0d6efd !important;
        transition: color 0.2s;
    }
    .add-to-cart-btn:hover,
    .favorite-btn:hover {
        background: #e7f1ff;
        box-shadow: 0 0 0 0.15rem #0d6efd33;
    }
</style>
